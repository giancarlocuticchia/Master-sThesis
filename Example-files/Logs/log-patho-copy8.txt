EDSR(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (head): Sequential(
    (0): Conv2d(3, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (1): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (2): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (3): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (4): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (5): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (6): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (7): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (8): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (9): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (10): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (11): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (12): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (13): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (14): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (15): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (16): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (17): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (18): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (19): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (20): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (21): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (22): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (23): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (24): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (25): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (26): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (27): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (28): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (29): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (30): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (31): ResBlock(
      (body): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (32): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(256, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): Conv2d(256, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PixelShuffle(upscale_factor=2)
    )
    (1): Conv2d(256, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.4617]	182.9+286.7s

Evaluation:
[Custom x4]	PSNR: 28.364 (Best: 28.364 @epoch 1)
Forward: 142.50s

Saving...
Total: 143.65s

[Epoch 2]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.3226]	182.0+287.2s

Evaluation:
[Custom x4]	PSNR: 28.369 (Best: 28.369 @epoch 2)
Forward: 142.46s

Saving...
Total: 143.71s

[Epoch 3]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2224]	182.5+287.5s

Evaluation:
[Custom x4]	PSNR: 28.361 (Best: 28.369 @epoch 2)
Forward: 142.40s

Saving...
Total: 143.44s

[Epoch 4]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.3024]	182.4+287.4s

Evaluation:
[Custom x4]	PSNR: 28.368 (Best: 28.369 @epoch 2)
Forward: 142.43s

Saving...
Total: 143.46s

[Epoch 5]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2503]	181.9+287.1s

Evaluation:
[Custom x4]	PSNR: 28.348 (Best: 28.369 @epoch 2)
Forward: 142.44s

Saving...
Total: 143.73s

[Epoch 6]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2116]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.357 (Best: 28.369 @epoch 2)
Forward: 142.53s

Saving...
Total: 143.49s

[Epoch 7]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2365]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.367 (Best: 28.369 @epoch 2)
Forward: 142.51s

Saving...
Total: 143.47s

[Epoch 8]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2156]	182.0+287.1s

Evaluation:
[Custom x4]	PSNR: 28.366 (Best: 28.369 @epoch 2)
Forward: 142.42s

Saving...
Total: 143.43s

[Epoch 9]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1551]	181.9+287.1s

Evaluation:
[Custom x4]	PSNR: 28.360 (Best: 28.369 @epoch 2)
Forward: 142.46s

Saving...
Total: 143.50s

[Epoch 10]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1275]	181.9+287.1s

Evaluation:
[Custom x4]	PSNR: 28.358 (Best: 28.369 @epoch 2)
Forward: 142.47s

Saving...
Total: 143.63s

[Epoch 11]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1479]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.359 (Best: 28.369 @epoch 2)
Forward: 142.46s

Saving...
Total: 143.37s

[Epoch 12]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1077]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.366 (Best: 28.369 @epoch 2)
Forward: 142.41s

Saving...
Total: 143.34s

[Epoch 13]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2142]	181.9+287.1s

Evaluation:
[Custom x4]	PSNR: 28.349 (Best: 28.369 @epoch 2)
Forward: 142.48s

Saving...
Total: 143.41s

[Epoch 14]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1715]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.353 (Best: 28.369 @epoch 2)
Forward: 142.47s

Saving...
Total: 143.40s

[Epoch 15]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0821]	182.3+287.5s

Evaluation:
[Custom x4]	PSNR: 28.368 (Best: 28.369 @epoch 2)
Forward: 142.33s

Saving...
Total: 143.44s

[Epoch 16]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0414]	182.4+287.6s

Evaluation:
[Custom x4]	PSNR: 28.358 (Best: 28.369 @epoch 2)
Forward: 142.40s

Saving...
Total: 143.32s

[Epoch 17]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2287]	182.1+287.4s

Evaluation:
[Custom x4]	PSNR: 28.361 (Best: 28.369 @epoch 2)
Forward: 142.44s

Saving...
Total: 143.42s

[Epoch 18]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1455]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.364 (Best: 28.369 @epoch 2)
Forward: 142.48s

Saving...
Total: 143.38s

[Epoch 19]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1150]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.369 (Best: 28.369 @epoch 19)
Forward: 142.48s

Saving...
Total: 143.63s

[Epoch 20]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0924]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.360 (Best: 28.369 @epoch 19)
Forward: 142.48s

Saving...
Total: 143.68s

[Epoch 21]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0961]	181.9+287.4s

Evaluation:
[Custom x4]	PSNR: 28.349 (Best: 28.369 @epoch 19)
Forward: 142.53s

Saving...
Total: 143.48s

[Epoch 22]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0106]	181.9+287.4s

Evaluation:
[Custom x4]	PSNR: 28.368 (Best: 28.369 @epoch 19)
Forward: 142.52s

Saving...
Total: 143.43s

[Epoch 23]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1129]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.356 (Best: 28.369 @epoch 19)
Forward: 142.53s

Saving...
Total: 143.44s

[Epoch 24]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0895]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.362 (Best: 28.369 @epoch 19)
Forward: 142.47s

Saving...
Total: 143.39s

[Epoch 25]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0923]	181.9+287.2s

Evaluation:
[Custom x4]	PSNR: 28.366 (Best: 28.369 @epoch 19)
Forward: 142.46s

Saving...
Total: 143.54s

[Epoch 26]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.2063]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.367 (Best: 28.369 @epoch 19)
Forward: 142.45s

Saving...
Total: 143.37s

[Epoch 27]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1303]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.353 (Best: 28.369 @epoch 19)
Forward: 142.44s

Saving...
Total: 143.36s

[Epoch 28]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1784]	182.5+287.7s

Evaluation:
[Custom x4]	PSNR: 28.358 (Best: 28.369 @epoch 19)
Forward: 142.45s

Saving...
Total: 143.37s

[Epoch 29]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0462]	182.5+287.7s

Evaluation:
[Custom x4]	PSNR: 28.360 (Best: 28.369 @epoch 19)
Forward: 142.48s

Saving...
Total: 143.41s

[Epoch 30]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1384]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.364 (Best: 28.369 @epoch 19)
Forward: 142.48s

Saving...
Total: 143.76s

[Epoch 31]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0840]	182.0+287.3s

Evaluation:
[Custom x4]	PSNR: 28.365 (Best: 28.369 @epoch 19)
Forward: 142.52s

Saving...
Total: 143.48s

[Epoch 32]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0759]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.355 (Best: 28.369 @epoch 19)
Forward: 142.51s

Saving...
Total: 143.46s

[Epoch 33]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0839]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.361 (Best: 28.369 @epoch 19)
Forward: 142.49s

Saving...
Total: 143.41s

[Epoch 34]	Learning rate: 1.00e-4
[1600/2400]	[L1: 9.9444]	182.0+287.3s

Evaluation:
[Custom x4]	PSNR: 28.375 (Best: 28.375 @epoch 34)
Forward: 142.47s

Saving...
Total: 143.64s

[Epoch 35]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.1604]	181.9+287.3s

Evaluation:
[Custom x4]	PSNR: 28.360 (Best: 28.375 @epoch 34)
Forward: 142.47s

Saving...
Total: 143.58s

[Epoch 36]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0441]	181.9+287.4s

Evaluation:
[Custom x4]	PSNR: 28.357 (Best: 28.375 @epoch 34)
Forward: 142.49s

Saving...
Total: 143.43s

[Epoch 37]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0964]	182.0+287.4s

Evaluation:
[Custom x4]	PSNR: 28.363 (Best: 28.375 @epoch 34)
Forward: 142.48s

Saving...
Total: 143.42s

[Epoch 38]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0323]	181.9+287.4s

Evaluation:
[Custom x4]	PSNR: 28.356 (Best: 28.375 @epoch 34)
Forward: 142.48s

Saving...
Total: 143.61s

[Epoch 39]	Learning rate: 1.00e-4
[1600/2400]	[L1: 9.9723]	182.0+287.4s

Evaluation:
[Custom x4]	PSNR: 28.338 (Best: 28.375 @epoch 34)
Forward: 142.51s

Saving...
Total: 143.60s

[Epoch 40]	Learning rate: 1.00e-4
[1600/2400]	[L1: 10.0931]	182.2+287.5s

Evaluation:
[Custom x4]	PSNR: 28.368 (Best: 28.375 @epoch 34)
Forward: 142.50s

Saving...
Total: 143.81s

